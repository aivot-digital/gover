# Allow to load properties from /run/secrets/ directory
# This is useful when using Docker secrets
spring.config.import=optional:configtree:/run/secrets/

# Set the config for the database connection
spring.datasource.url=jdbc:postgresql://${GOVER_DB_HOST}:${GOVER_DB_PORT}/${GOVER_DB_DATABASE}?stringtype=unspecified
spring.datasource.username=${GOVER_DB_USERNAME}
spring.datasource.password=${GOVER_DB_PASSWORD}

# Define the database connection pool properties
spring.datasource.hikari.minimum-idle=${GOVER_DB_MIN_IDLE:5}
spring.datasource.hikari.maximum-pool-size=${GOVER_DB_MAX_POOL_SIZE:10}

# Set the default base path for the backend application
spring.data.rest.basePath=/api

# Set the default upload size limits
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=100MB

#server.error.include-message=always
#server.error.include-binding-errors=always
#server.error.include-stacktrace=ON_PARAM
#server.error.include-exception=true

# Set the default path for the actuator endpoints
management.endpoints.web.base-path=/api/public/actuator
management.endpoints.web.exposure.include=*
management.endpoints.enabled-by-default=false

management.endpoint.health.enabled=true
management.endpoint.health.show-details=when-authorized
management.health.diskspace.enabled=true
management.health.db.enabled=true
management.health.mail.enabled=true
management.health.av.enabled=true
management.endpoint.httpexchanges.enabled=true

# Prevent hibernate from modifying the database schema
# This is handled by Flyway instead
spring.jpa.hibernate.ddl-auto=validate
# Close the hibernate session at the end of a transaction to prevent lazy loading issues
spring.jpa.open-in-view=false

# Set the default Redis connection properties
spring.data.redis.host=${GOVER_REDIS_HOST}
spring.data.redis.port=${GOVER_REDIS_PORT}
spring.data.redis.database=${GOVER_REDIS_DATABASE}

# Remove the default UserDetailsService auto-configuration
spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration

# Enable flyway for database migrations
spring.flyway.enabled=true
# Add option to allow flyway to operate on databases with some preexisting schema
# This is useful when working with managed Azure PostgreSQL databases
spring.flyway.baselineOnMigrate=${GOVER_DB_BASELINE_ON_MIGRATE:false}

server.error.whitelabel.enabled=false

# Set the properties for the mail server
spring.mail.host=${GOVER_SMTP_HOST}
spring.mail.port=${GOVER_SMTP_PORT}
spring.mail.username=${GOVER_SMTP_USERNAME}
spring.mail.password=${GOVER_SMTP_PASSWORD}
spring.mail.properties.mail.smtp.auth=${GOVER_SMTP_AUTH:true}
spring.mail.properties.mail.smtp.starttls.enable=${GOVER_SMTP_TLS:true}

# Set the properties for the logging
logging.level.root=${GOVER_LOG_LEVEL:INFO}
logging.structured.format.console=${GOVER_LOG_FORMAT:}

# Set the properties for the ClamAV server
clam.host=${GOVER_CLAM_HOST}
clam.port=${GOVER_CLAM_PORT}
clam.timeout=20000

# Set the properties for the PuppetPDF server
puppetpdf.host=${GOVER_PUPPET_PDF_HOST}
puppetpdf.port=${GOVER_PUPPET_PDF_PORT}

# Set the encryption key for the secrets
secrets.key=${GOVER_SECRETS_KEY}

# Set basic properties for the gover business case
gover.goverHostname=${GOVER_HOSTNAME}
gover.fromMail=${GOVER_FROM_MAIL}
gover.reportMail=${GOVER_REPORT_MAIL}
gover.sentryServer=${GOVER_SENTRY_SERVER:}
gover.sentryWebApp=${GOVER_SENTRY_WEB_APP:}
gover.environment=${GOVER_ENVIRONMENT:}
gover.fileExtensions=${GOVER_FILE_EXTENSIONS}
gover.contentTypes=${GOVER_CONTENT_TYPES}
gover.maxSubmissionCopyRetryCount=3

# Configure oidc authentication details
spring.security.oauth2.client.registration.keycloak.client-id=${GOVER_KEYCLOAK_OIDC_FRONTEND_CLIENT_ID}
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.keycloak.scope=profile,email,roles,groups
spring.security.oauth2.client.provider.keycloak.issuer-uri=${GOVER_KEYCLOAK_OIDC_HOSTNAME}/realms/${GOVER_KEYCLOAK_OIDC_REALM}
spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username
spring.security.oauth2.resourceserver.jwt.issuer-uri=${GOVER_KEYCLOAK_OIDC_HOSTNAME}/realms/${GOVER_KEYCLOAK_OIDC_REALM}

# Configure the details for the keycloak authentication for BundID, BayernID, Servicekonto Schleswig-Holstein and MUK
keycloak.id.hostname=${GOVER_KEYCLOAK_ID_HOSTNAME}
keycloak.id.realm=${GOVER_KEYCLOAK_ID_REALM}
keycloak.id.client=${GOVER_KEYCLOAK_ID_CLIENT}

# Configure the details for fetching, managing and updating the gover user data
keycloak.oidc.hostname=${GOVER_KEYCLOAK_OIDC_HOSTNAME}
keycloak.oidc.realm=${GOVER_KEYCLOAK_OIDC_REALM}
keycloak.oidc.frontendClientId=${GOVER_KEYCLOAK_OIDC_FRONTEND_CLIENT_ID}
keycloak.oidc.backendClientId=${GOVER_KEYCLOAK_OIDC_BACKEND_CLIENT_ID}
keycloak.oidc.backendClientSecret=${GOVER_KEYCLOAK_OIDC_BACKEND_CLIENT_SECRET}

# Set the path for locally stored files
storage.localStoragePath=${GOVER_STORAGE_LOCAL_PATH:./data}

# Set the properties for the remote s3 storage
storage.remoteEndpoint=${GOVER_STORAGE_REMOTE_ENDPOINT:}
storage.remoteBucket=${GOVER_STORAGE_REMOTE_BUCKET:}
storage.remoteAccessKey=${GOVER_STORAGE_REMOTE_ACCESS_KEY:}
storage.remoteSecretKey=${GOVER_STORAGE_REMOTE_SECRET_KEY:}
